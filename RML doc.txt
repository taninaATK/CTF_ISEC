RML TYPE SYSTEM
===============

RML is strongly typed, and the type discipline is checked statically at 
compile-time. The special value None has type "nothing" (it denotes the absence
of value). We have the following rules:

For all types R and S, 

    "anything" is a subtype of R,
    R          is a subtype of "something",
    "nothing"  is a subtype of "R maybe",
    R          is a subtype of "R maybe",
    "R list"   is a subtype of "S list"      iff    R is a subtype of S,
    "R maybe"  is a subtype of "S maybe"     iff    R is a subtype of S.


(Recall that S is a subtype of T if a value of type S can always be used in 
place of a value of type T).  Keen observers will have noticed that RML uses 
non-structural subtyping.

The programmer must declare the type of all variables (using the "let" 
instruction).  New values can simply be assigned to already-declared variables.
When a value is assigned to a variable, it must have a compatible type.

The base types are string, data, int and bool.  The + operator works with ints, 
strings, data and list (it concatenates them).  The -, *, /, <, > operators
require int arguments.  The equality comparison operators == and != work with any 
type.  The :: operator (which appends an item at the end of a list) requires a 
list and a compatible item. The ^ operator (XOR) only works on data. 

In other terms:

     +  : (int, int) -> int
        | (string, string) -> string
        | (data, data) -> data
        | (R list, S list) -> R list    iff S is a subtype of R
        | (R list, S list) -> S list    iff R is a subtype of S

-, *, / : (int, int) -> int
      ^ : (data, data) -> data
    ::  : (R list, S) -> R list         iff S a subtype of R

   <, > : (int, int) -> bool
and, or : (bool, bool) -> bool
    not : (bool) -> bool  
 ==, != : (something, something) -> bool

The type system checks that arguments have compatible types in function calls,
and that the return values of function have a compatible type.  Without argument,
the "return" statement is equivalent to "return None".  The special "panic" 
statement is equivalent to a "return" with a special value of type "anything".
    
The "case" statement is specifically designed to deal with "R maybe" values ; in
the "Some <id>" branch, the name <id> is bound to a value of type R, which is 
thus guaranteed not to be None.


RML STANDARD LIBRARY v1.34
==========================

In addition to the default predefined types (bool, int, string, data), the RML 
standard library defines the following extra types :
  - ROOM
  - ITEM
  - DIRECTION

These types are opaque.  The "data" type denotes an arbitrary bit string.

Here is a list of functions offered by the standard library :

string_of_int (i : int) -> string
direction_from_string(name : string) -> DIRECTION maybe
direction_to_string(dir : DIRECTION) -> string
room_name(room : ROOM) -> string
room_description(room : ROOM) -> string
room_from_name (name : string) -> ROOM maybe
neighbor (room : ROOM, direction : DIRECTION) -> ROOM maybe
room_items (room : ROOM) -> ITEM list
room_directions (room : ROOM) -> DIRECTION list
item_name (item : ITEM) -> string
item_portable (item : ITEM) -> string maybe.          
item_use (item : ITEM) -> anything.                   
item_match (item : ITEM, name : string) -> bool.      
item_gender (item : ITEM) -> string
item_state (item : ITEM) -> string maybe
item_location (item : ITEM) -> ROOM
item_description_handles (item : ITEM) -> data list
handle_ciphertext (handle : data) -> data. 
handle_key (serial_number : string, handle : data) -> data maybe. 
encrypt(key : data, plaintext : string) -> data
decrypt(key : data, ciphertext : data) -> string maybe
here () -> ROOM
hint (word : string maybe) -> string maybe
print (message : string) -> nothing
move_self_to_room (room : ROOM) -> nothing
move_item_to_room (item : ITEM, room : ROOM) -> nothing

RML GRAMMAR
===========

<statements> ::= <empty> | <statement> | <statement> . <statements>
    
<statement> ::= extern type <id>
            | let <id> : <type> = <expression>
            | extern def <id> ( <formals> ) -> <type> 
            | def <id> ( <formals> ) -> <type> <code>
    
<formals> ::= <empty> | <id> : <type> | <id> : <type> , <formals>
    
<type> ::= <id> | <type> list | <type> maybe | anything | something | nothing
    
<code> ::= { instructions }
   
<instructions> ::= <empty> | <instruction> | <instruction> ; <instructions>
   
<instruction> ::= <expression>
                | let <id> : <type> = <expression>
                | <id> = <expression>
                | for <id> in <expression> <code>
                | if <expression> <code>
                | if <expression> <code else <code>
                | case <expression> | None -> <code> | Some <id> -> <code>
                | return <expression>
                | return
                | panic
    
<expressions> ::= <empty> | <expression> | <expression> , <expressions>

<expression> ::= None 
             | <string>
             | <int>
             | [ <expression> ]                               --- list
             | not <expression>
             | <expression> <operator> <expression>
             | <id> ( <expressions> )                         --- function call
             | ( <expression> )

<operator> ::= + | - | * | / | == | != | < | > | or | and | :: | ^
RML UNIFIED EXTENSIBLE FIRMWARE INTERFACE (UEFI)
================================================

RML has been designed to efficiently prototype firmwares, with the added benefit
of extra safety provided by the strong type system.  Firmwares are programs.  
Firmwares must have a "main" function with the following signature:

        main (action : string maybe, direction : string maybe, item : string maybe) -> nothing


The minimal RML firmware program is thus:

-----BEGIN RML PROGRAM -----
extern type string.

def main(action : string maybe, direction : string maybe, item : string maybe) -> nothing {
}.
-----END RML PROGRAM -----

Another relevant example (extracted from a post-mortem on the previous coffee-pot):

-----BEGIN RML PROGRAM -----
extern type string.
extern type ROOM.

extern def print (message : string) -> nothing.
extern def here () -> ROOM.
extern def room_name(room : ROOM) -> string.

def main(action : string maybe, direction : string maybe, item : string maybe) -> nothing {
  let location : ROOM = here();
  if room_name(location) != "ISIR_CAFET" {
    print("0xbadCAFE !!!"); 
    panic                               # nobody steals our hackable coffee pot!
  };
  # ... rest of the coffee-making program
  # ejecting previous roast
  # grounding fresh beans
  # sending water
  # etc...
  
-----END RML PROGRAM -----


The firmware function is invoked by the operating system and/or the application
running on the device to perform ``actions''.  The precise nature of the actions
depend on the nature of the device.

For security reasons, firmwares are cryptographically authentified using a MAC.
By default, ISIR robots and the Experimental RML Compiler use the following MAC:

        tag := SHA256(key || message)

with a specific 128-bit key.  Note that SHA256 is a cryptographically secure hash 
function.  As an example, the MAC of the (incomplete) coffee-pot program shown 
above is:

        165daddb7e8019461e69bcda99511e2c64a10c3d79c8aa025371e655affbef27

!!! DISCLAIMER !!!
==================

The ISIR Experimental RML Compiler has known bugs, and is known to produce
potentially incorrect firmwares in some specific cases.